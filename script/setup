#!/usr/bin/env bash

set -e

function db_setup {
    echo "Setting up database..."
    pushd "$(dirname "$0")" > /dev/null
    if [ -f ./../schema.sql ]; then
        echo "Schema file found"
    else
        echo "Schema file not found"
        return
    fi
    if [ -z "$(docker-compose ps -q db)" ]; then
        echo "Database container not running. Starting..."
        docker-compose up -d db
        while [ -z "$(docker-compose ps -q db)" ]; do
            echo "Waiting for database container to start..."
            sleep 1
        done
        echo "Database container is running"
    fi
    
    echo "Setting up database schema..."
    schemaContents="$(<./../schema.sql)"
    docker-compose exec db mysql -uroot -e "$schemaContents"
    echo "Database setup completed. Access mysql with 'docker-compose exec db mysql -uroot'"
    popd > /dev/null
}

function redis_setup {
    echo "Setting up redis..."
    docker-compose up -d redis
    echo "Redis setup completed. Access redis-cli with 'docker-compose exec redis redis-cli'"
}

function start {
    echo "Starting services..."
    docker-compose up -d
    echo "Services started"
}

function test {
    pushd "$(dirname "$0")" > /dev/null
    go build -o ./../bin/api ./../cmd/api/...
    go build -o ./../bin/worker ./../cmd/worker/...
    # collect PID of the processes and output
    ./../bin/api &
    pid_api=$!
    ./../bin/worker &
    pid_worker=$!
    popd > /dev/null
    echo "API started with PID: $pid_api"
    echo "Worker started with PID: $pid_worker"
    # use healthz endpoint to check if the services are running
    while [ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/healthz)" != "200" ]; do
        echo "Waiting for services to start..."
        sleep 1
    done
    echo "Testing requests..."
    for i in {1..10}; do
        id=$(curl -s -d '{"payload": "test"}' http://localhost:8080/tasks)
        status=$(curl -s http://localhost:8080/tasks/"$id")

        echo "${i}: Task ${id} status: ${status}"
    done
    echo "check grafana at http://localhost:3000 for metrics"
}

function exit_handler {
    echo "Cleaning up..."
    kill -9 $pid_api > /dev/null
    kill -9 $pid_worker > /dev/null
    pushd "$(dirname "$0")" > /dev/null
    rm -rf ./../bin/*
    popd > /dev/null
}

trap exit_handler EXIT

start
db_setup
redis_setup
test
